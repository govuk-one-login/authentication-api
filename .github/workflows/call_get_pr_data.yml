name: Get PR Data
on:
  workflow_call:
    outputs:
      data:
        description: "JSON string representation of the metadata"
        value: ${{ jobs.get-pr-data.outputs.data }}

jobs:
  get-pr-data:
    name: Get data for merged PR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      data: ${{ steps.get_pr_data.outputs.result }}
    steps:
      - name: Get PR data
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: get_pr_data
        with:
          result-encoding: string
          # language=javascript prefix="module.exports = async ({github, context}) => {\n" suffix=}
          script: |
            const query = `query($owner: String!, $name: String!, $oid: GitObjectID!) {
                repository(owner: $owner, name: $name) {
                  object(oid: $oid) {
                    ... on Commit {
                      oid
                      message
                      associatedPullRequests(first: 1) {
                        nodes {
                          number
                          title
                          merged
                          mergedAt
                          mergeCommit {
                            oid
                          }
                        }
                      }
                    }
                  }
                  owner {
                    login
                  }
                  name
                  nameWithOwner
                }
              }`
            const variables = {
                owner: context.repo.owner,
                name: context.repo.repo,
                oid: context.sha,
            }

            const result = await github.graphql(query, variables).then((response) => {
                const firstLineOfCommitMessage = response.repository.object.message.split("\n")[0];
                const shortCommitSha = context.sha.slice(0, 7);
                const res = {
                    pr_number: null,
                    pr_title: null,
                    pr_merged_at: null,
                    pr_merge_commit_sha: null,

                    commit_message: firstLineOfCommitMessage,

                    repo_full_name: response.repository.nameWithOwner,
                    repo_owner: response.repository.owner.login,
                    repo_name: response.repository.name,

                    repository: response.repository.nameWithOwner,
                    commitsha: context.sha,
                    commitmessage: firstLineOfCommitMessage,
                }
                res["codepipeline-artifact-revision-summary"] = `${shortCommitSha}: ${firstLineOfCommitMessage}`;

                if (response.repository.object.associatedPullRequests.nodes.length > 0 && response.repository.object.associatedPullRequests.nodes[0].merged) {
                    const prData = response.repository.object.associatedPullRequests.nodes[0];
                    const shortMergeCommitSha = prData.mergeCommit.oid.slice(0, 7);
                    res.pr_number = prData.number.toString();
                    res.pr_title = prData.title;
                    res.pr_merged_at = prData.mergedAt;
                    res.pr_merge_commit_sha = prData.mergeCommit.oid;
                    res.commitmessage = prData.title;

                    res["codepipeline-artifact-revision-summary"] = `${shortMergeCommitSha}: #${prData.number} (${response.repository.nameWithOwner}) - ${prData.title}`;
                }

                if (res["codepipeline-artifact-revision-summary"].length > 2048) {
                    res["codepipeline-artifact-revision-summary"] = res["codepipeline-artifact-revision-summary"].slice(0, 2048);
                }

                return res;
            }).catch((error) => {
                throw error;
            });

            for (const key in result) {
                if (result[key] == null) {
                    result[key] = "";
                }
                // strip non-ascii characters from all values
                result[key] = result[key].replace(/[^\x20-\x7E]/g, '');
            }

            console.log(result);
            return JSON.stringify(result);
