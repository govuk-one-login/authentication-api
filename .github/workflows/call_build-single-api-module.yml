name: Build API Module
on:
  workflow_call:
    inputs:
      module_name:
        description: "The name of the module to build"
        type: string
        required: true
      aws_region:
        description: "The AWS region to use"
        type: string
        required: true
      aws_role:
        description: "ARN of the AWS role to assume"
        type: string
        required: true
      source_bucket:
        description: "The S3 bucket where the unsigned artifact is stored"
        type: string
        required: true
      destination_bucket:
        description: "The S3 bucket where the signed artifact will be stored"
        type: string
        required: true
      signing_profile:
        description: "The AWS Signer profile to use for signing the artifact"
        type: string
        required: true
      lookup_table:
        description: "The DynamoDB table to use for looking up previous artifacts"
        type: string
        required: true

      # The following are optional
      java_version:
        description: "The Java version to use"
        type: string
        default: "17"
      java_distribution:
        description: "The Java distribution to use"
        type: string
        default: "corretto"

jobs:
  build:
    name: Build ${{ inputs.module_name }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      ARTIFACT_HAS_CHANGED: true # preset to true, so that the artifact is uploaded on the first run of this workflow
      SIGNED_OBJECT_KEY: "" # preset to empty string, so the linter doesn't complain about it being undefined
      ARTIFACT_COMMIT_SHA: ${{ github.sha }}
    outputs:
      code_sha: ${{ steps.create_artifacts.outputs.code_sha }}
      signed_object_key: ${{ steps.create_artifacts.outputs.signed_object_key }}
      artifact_id: ${{ steps.upload-artifacts.outputs.artifact-id }}
      artifact_url: ${{ steps.upload-artifacts.outputs.artifact-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          role-to-assume: ${{ inputs.aws_role }}
          aws-region: ${{ inputs.aws_region }}

      - name: Set up JDK 17
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 #v5.0.0
        with:
          java-version: ${{ inputs.java_version }}
          distribution: ${{ inputs.java_distribution }}

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@017a9effdb900e5b5b2fddfb590a105619dca3c3 # v4
        with:
          gradle-version: wrapper
          cache-read-only: true
          add-job-summary: "on-failure"

      - name: Build ${{ inputs.module_name }}
        id: build
        env:
          MODULE_NAME: ${{ inputs.module_name }}
        run: |
          ./gradlew --no-daemon :"$MODULE_NAME":buildZip

          echo "Zip built successfully. Calculating sha256sum..."
          sha256sum "$MODULE_NAME/build/distributions/$MODULE_NAME.zip"

          SHA="$(sha256sum "$MODULE_NAME/build/distributions/$MODULE_NAME.zip" | cut -d ' ' -f 1)"
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"

      - name: Query dynamodb for previous artifact
        id: query_dynamodb
        env:
          MODULE_NAME: ${{ inputs.module_name }}
          LOOKUP_TABLE: ${{ inputs.lookup_table }}
          ARTIFACT_HASH: ${{ steps.build.outputs.sha }}
        run: |
          PREVIOUS_SIGNED="$(aws dynamodb get-item \
            --table-name "$LOOKUP_TABLE" \
            --key '{"module_name": {"S": "'"$MODULE_NAME"'"}, "artifact_hash": {"S": "'"$ARTIFACT_HASH"'"}}')"

          if [ -n "${PREVIOUS_SIGNED}" ]; then
            PREVIOUS_KEY="$(echo "${PREVIOUS_SIGNED}" | jq '.Item.signed_object_key.S' -r)"
            PREVIOUS_COMMIT_SHA="$(echo "${PREVIOUS_SIGNED}" | jq '.Item.commit_sha.S' -r)"
            echo "Found previous artifact in DynamoDB table: ${PREVIOUS_COMMIT_SHA}"
            {
              echo "SIGNED_OBJECT_KEY=$PREVIOUS_KEY"
              echo "ARTIFACT_COMMIT_SHA=$PREVIOUS_COMMIT_SHA"
              echo "ARTIFACT_HAS_CHANGED=false"
            } >> "$GITHUB_ENV"
          else
            echo "No previous artifact found in DynamoDB table"
            echo 'ARTIFACT_HAS_CHANGED=true' >> "$GITHUB_ENV"
            echo "::warning title=$MODULE_NAME::$MODULE_NAME module has changed, using the new artifact"
          fi

      - name: Ensure previous artifact still exists
        if: env.ARTIFACT_HAS_CHANGED == 'false'
        env:
          MODULE_NAME: ${{ inputs.module_name }}
          DESTINATION_BUCKET: ${{ inputs.destination_bucket }}
          LOOKUP_TABLE: ${{ inputs.lookup_table }}
          ARTIFACT_HASH: ${{ steps.build.outputs.sha }}
        run: |
          if ! aws s3api head-object \
            --bucket "$DESTINATION_BUCKET" \
            --key "$SIGNED_OBJECT_KEY"
          then
            echo "Previous artifact no longer exists in S3 bucket, reuploading and resigning artifact. Deleting record from DynamoDB table..."
            aws dynamodb delete-item \
              --table-name "$LOOKUP_TABLE" \
              --key '{"module_name": {"S": "'"$MODULE_NAME"'"}, "artifact_hash": {"S": "'"$ARTIFACT_HASH"'"}}'
            echo 'ARTIFACT_HAS_CHANGED=true' >> "$GITHUB_ENV"
            echo "::warning title=$MODULE_NAME::$MODULE_NAME module has changed, using the new artifact"
          else
            echo "::notice title=$MODULE_NAME::$MODULE_NAME module has not changed, reusing artifact from commit $ARTIFACT_COMMIT_SHA"
          fi

      - name: Upload ${{ inputs.module_name }} to source bucket
        id: upload_unsigned_artifact
        if: env.ARTIFACT_HAS_CHANGED == 'true'
        env:
          MODULE_NAME: ${{ inputs.module_name }}
          SOURCE_BUCKET: ${{ inputs.source_bucket }}
          COMMIT_SHA: ${{ github.sha }}
        run: |
          cd "$MODULE_NAME/build/distributions"
          VERSION="$(aws s3api put-object \
            --bucket "$SOURCE_BUCKET" \
            --key "$MODULE_NAME/$COMMIT_SHA.zip" \
            --body "$MODULE_NAME.zip" \
            --metadata "commitsha=$COMMIT_SHA" \
            --query "VersionId" --output text)"

          echo "Uploaded unsigned $MODULE_NAME to S3 bucket, key: $MODULE_NAME/$COMMIT_SHA.zip"

          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Run signing job for ${{ inputs.module_name }}
        if: env.ARTIFACT_HAS_CHANGED == 'true'
        env:
          MODULE_NAME: ${{ inputs.module_name }}
          SIGNING_PROFILE: ${{ inputs.signing_profile }}
          SOURCE_BUCKET: ${{ inputs.source_bucket }}
          DESTINATION_BUCKET: ${{ inputs.destination_bucket }}
          COMMIT_SHA: ${{ github.sha }}
          VERSION: ${{ steps.upload_unsigned_artifact.outputs.version }}
        run: |
          JOB_ID="$(aws signer start-signing-job \
            --profile-name "$SIGNING_PROFILE" \
            --source "s3={bucketName=$SOURCE_BUCKET,key=$MODULE_NAME/$COMMIT_SHA.zip,version=$VERSION}" \
            --destination "s3={bucketName=$DESTINATION_BUCKET,prefix=signed-$MODULE_NAME-$COMMIT_SHA-}" \
            --query "jobId" --output=text)"

          echo "Waiting for signing job ${JOB_ID} to complete..."
          aws signer wait successful-signing-job --job-id "$JOB_ID"

          SIGNED_OBJECT="$(aws signer describe-signing-job --job-id "${JOB_ID}" --query "signedObject.s3.key" --output=text)"

          echo "Object signed: ${SIGNED_OBJECT}"
          echo "SIGNED_OBJECT_KEY=${SIGNED_OBJECT}" >> "$GITHUB_ENV"

      - name: Record artifact in DynamoDB
        if: env.ARTIFACT_HAS_CHANGED == 'true'
        env:
          MODULE_NAME: ${{ inputs.module_name }}
          LOOKUP_TABLE: ${{ inputs.lookup_table }}
          ARTIFACT_HASH: ${{ steps.build.outputs.sha }}
          COMMIT_SHA: ${{ github.sha }}
        run: |
          aws dynamodb put-item \
            --table-name "$LOOKUP_TABLE" \
            --item '{"module_name":{"S":"'"$MODULE_NAME"'"},"artifact_hash":{"S":"'"$ARTIFACT_HASH"'"},"signed_object_key":{"S":"'"$SIGNED_OBJECT_KEY"'"},"commit_sha":{"S":"'"$COMMIT_SHA"'"}}'

      - name: Prepare GHA artifacts
        id: create_artifacts
        env:
          MODULE_NAME: ${{ inputs.module_name }}
          DESTINATION_BUCKET: ${{ inputs.destination_bucket }}
        run: |
          artifact_dir="/tmp/artifacts"

          mkdir -p "${artifact_dir}"
          echo -n "$ARTIFACT_COMMIT_SHA" >> "${artifact_dir}/${MODULE_NAME}_commitsha.txt"

          aws s3api get-object \
            --bucket "$DESTINATION_BUCKET" \
            --key "$SIGNED_OBJECT_KEY" \
            "${artifact_dir}/${MODULE_NAME}.zip"

          {
            echo "artifact_dir=${artifact_dir}"
            echo "code_sha=$ARTIFACT_COMMIT_SHA"
            echo "signed_object_key=$SIGNED_OBJECT_KEY"
          } >> "$GITHUB_OUTPUT"

      - name: Upload artifacts
        id: upload-artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        env:
          MODULE_NAME: ${{ inputs.module_name }}
        with:
          name: signed-${{ env.MODULE_NAME }}
          path: "${{ steps.create_artifacts.outputs.artifact_dir }}/"
