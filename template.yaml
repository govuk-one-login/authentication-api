AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Description: The name of the environment to deploy to
  VpcStackName:
    Type: String
    Description: The name of the stack used to create the VPC
  CodeSigningConfigArn:
    Type: String
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: none
  PermissionsBoundary:
    Type: String
    Description: The ARN of the permissions boundary to apply when creating IAM roles
    Default: none

Conditions:
  UsePermissionsBoundary:
    !Not [ !Equals [ none, !Ref PermissionsBoundary ] ]
  IsProd:
    !Equals [ production, !Ref Environment ]
  UseCodeSigning:
    !Not [ !Equals [ none, !Ref CodeSigningConfigArn ] ]

Mappings:
  EnvironmentConfiguration:
    dev:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      authApiId: "aqyf5d32s2"
      authAccountId: "761723964695"
    build:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      authApiId: "6of9f4amvg"
      authAccountId: "761723964695"
    staging:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      authApiId: "1rvwudxmbk"
      authAccountId: "758531536632"
    integration:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
      authApiId: "k2skqhxed6"
      authAccountId: "761723964695"
    production:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables
      authApiId: "s4gj268zy6"
      authAccountId: "172348255554"

Globals:
  Function:
    Environment:
      Variables:
        AWS_LAMBDA_EXEC_WRAPPER: /opt/dynatrace
        DT_CONNECTION_AUTH_TOKEN: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_AUTH_TOKEN}}'
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
        DT_CONNECTION_BASE_URL: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_BASE_URL}}'
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
        DT_CLUSTER_ID: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CLUSTER_ID}}'
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
        DT_LOG_COLLECTION_AUTH_TOKEN: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_LOG_COLLECTION_AUTH_TOKEN}}'
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
        DT_TENANT: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_TENANT}}'
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
        DT_OPEN_TELEMETRY_ENABLE_INTEGRATION: "true"
    MemorySize: 1536
    Timeout: 30
    SnapStart:
      ApplyOn: PublishedVersions
    Runtime: java17
    Architectures:
      - x86_64
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    Layers:
      - !Sub
        - '{{resolve:secretsmanager:${SecretArn}:SecretString:JAVA_LAYER}}'
        - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]

Resources:
  OpenIdConfigurationFunction:
    Type: AWS::Serverless::Function
    # checkov:skip=CKV_AWS_116: DLQ is not appropriate for a Lambda invoked by an API
    # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work
    Properties:
      AutoPublishAlias: latest
      CodeUri: ./oidc-api
      Handler: uk.gov.di.authentication.oidc.lambda.WellknownHandler::handleRequest
      ReservedConcurrentExecutions: 1
      Environment:
        Variables:
          # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
          OIDC_API_BASE_URL: !Sub https://oidc.${Environment}.account.gov.uk/
          ENVIRONMENT: !Sub ${Environment}
          FRONTEND_BASE_URL: !Sub https://signin.${Environment}.account.gov.uk/
      Tags:
        CheckovRulesToSkip: CKV_AWS_116.CKV_AWS_117.CKV_AWS_173

  OpenIdConfigurationFunctionCrossAccountPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OpenIdConfigurationFunction.Alias
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - 'arn:aws:execute-api:eu-west-2:${AccountId}:${ApiId}/*/GET/.well-known/openid-configuration'
        - AccountId: !FindInMap [ EnvironmentConfiguration, !Ref Environment, authAccountId ]
          ApiId: !FindInMap [ EnvironmentConfiguration, !Ref Environment, authApiId ]