#region FetchJwks Anomaly Alarms
FetchJwksErrorAnomalyDetector:
  Type: AWS::CloudWatch::AnomalyDetector
  Properties:
    MetricName: Errors
    Namespace: AWS/Lambda
    Stat: Average
    Dimensions:
      - Name: FunctionName
        Value:
          Fn::Sub: !If
            - UseSubEnvironment
            - !Sub ${SubEnvironment}-FetchJwksFunction
            - !Sub ${Environment}-FetchJwksFunction

FetchJwksErrorAnomalyAlarm:
  Type: AWS::CloudWatch::Alarm
  Properties:
    AlarmName:
      Fn::Sub: !If
        - UseSubEnvironment
        - !Sub ${SubEnvironment}-FetchJwks-error-anomaly-alarm
        - !Sub ${Environment}-FetchJwks-error-anomaly-alarm
    AlarmDescription:
      Fn::Sub: "Anomalous Error rate in ${Environment} FetchJwks lambda.ACCOUNT: di-orchestration-${Environment}"
    ActionsEnabled: false
    ComparisonOperator: GreaterThanUpperThreshold
    EvaluationPeriods: 3
    ThresholdMetricId: ad1
    TreatMissingData: notBreaching
    Metrics:
      - Id: ad1
        ReturnData: True
        Expression: ANOMALY_DETECTION_BAND(m1, 2)
      - Id: m1
        ReturnData: True
        MetricStat:
          Metric:
            Namespace: AWS/Lambda
            MetricName: Errors
            Dimensions:
              - Name: FunctionName
                Value:
                  Fn::Sub: !If
                    - UseSubEnvironment
                    - !Sub ${SubEnvironment}-FetchJwksFunction
                    - !Sub ${Environment}-FetchJwksFunction
          Period: 60
          Stat: Average

#endregion

#region OpenIdConfiguration Anomaly Alarms

OpenIdConfigurationErrorAnomalyDetector:
  Type: AWS::CloudWatch::AnomalyDetector
  Properties:
    MetricName: Errors
    Namespace: AWS/Lambda
    Stat: Average
    Dimensions:
      - Name: FunctionName
        Value:
          Fn::Sub: !If
            - UseSubEnvironment
            - !Sub ${SubEnvironment}-OpenIdConfigurationFunction
            - !Sub ${Environment}-OpenIdConfigurationFunction

OpenIdConfigurationErrorAnomalyAlarm:
  Type: AWS::CloudWatch::Alarm
  Properties:
    AlarmName:
      Fn::Sub: !If
        - UseSubEnvironment
        - !Sub ${SubEnvironment}-OpenIdConfiguration-error-anomaly-alarm
        - !Sub ${Environment}-OpenIdConfiguration-error-anomaly-alarm
    AlarmDescription:
      Fn::Sub: "Anomalous Error rate in ${Environment} OpenIdConfiguration lambda.ACCOUNT: di-orchestration-${Environment}"
    ActionsEnabled: false
    ComparisonOperator: GreaterThanUpperThreshold
    EvaluationPeriods: 3
    ThresholdMetricId: ad1
    TreatMissingData: notBreaching
    Metrics:
      - Id: ad1
        ReturnData: True
        Expression: ANOMALY_DETECTION_BAND(m1, 2)
      - Id: m1
        ReturnData: True
        MetricStat:
          Metric:
            Namespace: AWS/Lambda
            MetricName: Errors
            Dimensions:
              - Name: FunctionName
                Value:
                  Fn::Sub: !If
                    - UseSubEnvironment
                    - !Sub ${SubEnvironment}-OpenIdConfigurationFunction
                    - !Sub ${Environment}-OpenIdConfigurationFunction
          Period: 60
          Stat: Average

#endregion

#region Trustmark Anomaly Alarms

TrustmarkFunctionErrorAnomalyDetector:
  Type: AWS::CloudWatch::AnomalyDetector
  Properties:
    MetricName: Errors
    Namespace: AWS/Lambda
    Stat: Average
    Dimensions:
      - Name: FunctionName
        Value:
          Fn::Sub: !If
            - UseSubEnvironment
            - !Sub ${SubEnvironment}-TrustmarkFunction
            - !Sub ${Environment}-TrustmarkFunction

TrustmarkFunctionErrorAnomalyAlarm:
  Type: AWS::CloudWatch::Alarm
  Properties:
    AlarmName:
      Fn::Sub: !If
        - UseSubEnvironment
        - !Sub ${SubEnvironment}-trustmark-error-anomaly-alarm
        - !Sub ${Environment}-trustmark-error-anomaly-alarm
    AlarmDescription:
      Fn::Sub: "Anomalous Error rate in ${Environment} trustmark lambda.ACCOUNT: di-orchestration-${Environment}"
    ActionsEnabled: false
    ComparisonOperator: GreaterThanUpperThreshold
    EvaluationPeriods: 3
    ThresholdMetricId: ad1
    TreatMissingData: notBreaching
    Metrics:
      - Id: ad1
        ReturnData: True
        Expression: ANOMALY_DETECTION_BAND(m1, 2)
      - Id: m1
        ReturnData: True
        MetricStat:
          Metric:
            Namespace: AWS/Lambda
            MetricName: Errors
            Dimensions:
              - Name: FunctionName
                Value:
                  Fn::Sub: !If
                    - UseSubEnvironment
                    - !Sub ${SubEnvironment}-TrustmarkFunction
                    - !Sub ${Environment}-TrustmarkFunction
          Period: 60
          Stat: Average

#endregion

#region Back Channel Logout Request Anomaly Alarms
BackChannelLogoutRequestErrorAnomalyDetector:
  Type: AWS::CloudWatch::AnomalyDetector
  Properties:
    MetricName: Errors
    Namespace: AWS/Lambda
    Stat: Average
    Dimensions:
      - Name: FunctionName
        Value:
          Fn::Sub: !If
            - UseSubEnvironment
            - !Sub ${SubEnvironment}-BackChannelLogoutRequestFunction
            - !Sub ${Environment}-BackChannelLogoutRequestFunction

BackChannelLogoutRequestErrorAnomalyAlarm:
  Type: AWS::CloudWatch::Alarm
  Properties:
    AlarmName:
      Fn::Sub: !If
        - UseSubEnvironment
        - !Sub ${SubEnvironment}-BackChannelLogoutRequest-error-anomaly-alarm
        - !Sub ${Environment}-BackChannelLogoutRequest-error-anomaly-alarm
    AlarmDescription:
      Fn::Sub: "Anomalous Error rate in ${Environment} BackChannelLogoutRequest lambda.ACCOUNT: di-orchestration-${Environment}"
    ActionsEnabled: false
    ComparisonOperator: GreaterThanUpperThreshold
    EvaluationPeriods: 3
    ThresholdMetricId: ad1
    TreatMissingData: notBreaching
    Metrics:
      - Id: ad1
        ReturnData: True
        Expression: ANOMALY_DETECTION_BAND(m1, 2)
      - Id: m1
        ReturnData: True
        MetricStat:
          Metric:
            Namespace: AWS/Lambda
            MetricName: Errors
            Dimensions:
              - Name: FunctionName
                Value:
                  Fn::Sub: !If
                    - UseSubEnvironment
                    - !Sub ${SubEnvironment}-BackChannelLogoutRequestFunction
                    - !Sub ${Environment}-BackChannelLogoutRequestFunction
          Period: 60
          Stat: Average

#endregion

#region Doc App Callback Anomaly Alarms
DocAppCallbackErrorAnomalyDetector:
  Type: AWS::CloudWatch::AnomalyDetector
  Properties:
    MetricName: Errors
    Namespace: AWS/Lambda
    Stat: Average
    Dimensions:
      - Name: FunctionName
        Value:
          Fn::Sub: !If
            - UseSubEnvironment
            - !Sub ${SubEnvironment}-DocAppCallbackFunction
            - !Sub ${Environment}-DocAppCallbackFunction

DocAppCallbackErrorAnomalyAlarm:
  Type: AWS::CloudWatch::Alarm
  Properties:
    AlarmName:
      Fn::Sub: !If
        - UseSubEnvironment
        - !Sub ${SubEnvironment}-DocAppCallback-error-anomaly-alarm
        - !Sub ${Environment}-DocAppCallback-error-anomaly-alarm
    AlarmDescription:
      Fn::Sub: "Anomalous Error rate in ${Environment} DocAppCallback lambda.ACCOUNT: di-orchestration-${Environment}"
    ActionsEnabled: false
    ComparisonOperator: GreaterThanUpperThreshold
    EvaluationPeriods: 3
    ThresholdMetricId: ad1
    TreatMissingData: notBreaching
    Metrics:
      - Id: ad1
        ReturnData: True
        Expression: ANOMALY_DETECTION_BAND(m1, 2)
      - Id: m1
        ReturnData: True
        MetricStat:
          Metric:
            Namespace: AWS/Lambda
            MetricName: Errors
            Dimensions:
              - Name: FunctionName
                Value:
                  Fn::Sub: !If
                    - UseSubEnvironment
                    - !Sub ${SubEnvironment}-DocAppCallbackFunction
                    - !Sub ${Environment}-DocAppCallbackFunction
          Period: 60
          Stat: Average
#endregion

#region Token Function Anomaly Alarms
TokenFunctionErrorAnomalyDetector:
  Type: AWS::CloudWatch::AnomalyDetector
  Properties:
    MetricName: Errors
    Namespace: AWS/Lambda
    Stat: Average
    Dimensions:
      - Name: FunctionName
        Value:
          Fn::Sub: !If
            - UseSubEnvironment
            - !Sub ${SubEnvironment}-TokenFunction
            - !Sub ${Environment}-TokenFunction

TokenFunctionErrorAnomalyAlarm:
  Type: AWS::CloudWatch::Alarm
  Properties:
    AlarmName:
      Fn::Sub: !If
        - UseSubEnvironment
        - !Sub ${SubEnvironment}-TokenFunction-error-anomaly-alarm
        - !Sub ${Environment}-TokenFunction-error-anomaly-alarm
    AlarmDescription:
      Fn::Sub: "Anomalous Error rate in ${Environment} TokenFunction lambda.ACCOUNT: di-orchestration-${Environment}"
    ActionsEnabled: false
    ComparisonOperator: GreaterThanUpperThreshold
    EvaluationPeriods: 3
    ThresholdMetricId: ad1
    TreatMissingData: notBreaching
    Metrics:
      - Id: ad1
        ReturnData: True
        Expression: ANOMALY_DETECTION_BAND(m1, 2)
      - Id: m1
        ReturnData: True
        MetricStat:
          Metric:
            Namespace: AWS/Lambda
            MetricName: Errors
            Dimensions:
              - Name: FunctionName
                Value:
                  Fn::Sub: !If
                    - UseSubEnvironment
                    - !Sub ${SubEnvironment}-TokenFunction
                    - !Sub ${Environment}-TokenFunction
          Period: 60
          Stat: Average
#endregion

#region Logout Function Anomaly Alarms
LogoutFunctionErrorAnomalyDetector:
  Type: AWS::CloudWatch::AnomalyDetector
  Properties:
    MetricName: Errors
    Namespace: AWS/Lambda
    Stat: Average
    Dimensions:
      - Name: FunctionName
        Value:
          Fn::Sub: !If
            - UseSubEnvironment
            - !Sub ${SubEnvironment}-LogoutFunction
            - !Sub ${Environment}-LogoutFunction

LogoutFunctionErrorAnomalyAlarm:
  Type: AWS::CloudWatch::Alarm
  Properties:
    AlarmName:
      Fn::Sub: !If
        - UseSubEnvironment
        - !Sub ${SubEnvironment}-LogoutFunction-error-anomaly-alarm
        - !Sub ${Environment}-LogoutFunction-error-anomaly-alarm
    AlarmDescription:
      Fn::Sub: "Anomalous Error rate in ${Environment} LogoutFunction lambda.ACCOUNT: di-orchestration-${Environment}"
    ActionsEnabled: false
    ComparisonOperator: GreaterThanUpperThreshold
    EvaluationPeriods: 3
    ThresholdMetricId: ad1
    TreatMissingData: notBreaching
    Metrics:
      - Id: ad1
        ReturnData: True
        Expression: ANOMALY_DETECTION_BAND(m1, 2)
      - Id: m1
        ReturnData: True
        MetricStat:
          Metric:
            Namespace: AWS/Lambda
            MetricName: Errors
            Dimensions:
              - Name: FunctionName
                Value:
                  Fn::Sub: !If
                    - UseSubEnvironment
                    - !Sub ${SubEnvironment}-LogoutFunction
                    - !Sub ${Environment}-LogoutFunction
          Period: 60
          Stat: Average
#endregion

#region Authentication Callback Anomaly Alarms
AuthenticationCallbackFunctionErrorAnomalyDetector:
  Type: AWS::CloudWatch::AnomalyDetector
  Properties:
    MetricName: Errors
    Namespace: AWS/Lambda
    Stat: Average
    Dimensions:
      - Name: FunctionName
        Value:
          Fn::Sub: !If
            - UseSubEnvironment
            - !Sub ${SubEnvironment}-AuthenticationCallbackFunction
            - !Sub ${Environment}-AuthenticationCallbackFunction

AuthenticationCallbackFunctionErrorAnomalyAlarm:
  Type: AWS::CloudWatch::Alarm
  Properties:
    AlarmName:
      Fn::Sub: !If
        - UseSubEnvironment
        - !Sub ${SubEnvironment}-AuthenticationCallbackFunction-error-anomaly-alarm
        - !Sub ${Environment}-AuthenticationCallbackFunction-error-anomaly-alarm
    AlarmDescription:
      Fn::Sub: "Anomalous Error rate in ${Environment} AuthenticationCallbackFunction lambda.ACCOUNT: di-orchestration-${Environment}"
    ActionsEnabled: false
    ComparisonOperator: GreaterThanUpperThreshold
    EvaluationPeriods: 3
    ThresholdMetricId: ad1
    TreatMissingData: notBreaching
    Metrics:
      - Id: ad1
        ReturnData: True
        Expression: ANOMALY_DETECTION_BAND(m1, 2)
      - Id: m1
        ReturnData: True
        MetricStat:
          Metric:
            Namespace: AWS/Lambda
            MetricName: Errors
            Dimensions:
              - Name: FunctionName
                Value:
                  Fn::Sub: !If
                    - UseSubEnvironment
                    - !Sub ${SubEnvironment}-AuthenticationCallbackFunction
                    - !Sub ${Environment}-AuthenticationCallbackFunction
          Period: 60
          Stat: Average

#endregion

#region Jwks Function Anomaly Alarms
JwksFunctionErrorAnomalyDetector:
  Type: AWS::CloudWatch::AnomalyDetector
  Properties:
    MetricName: Errors
    Namespace: AWS/Lambda
    Stat: Average
    Dimensions:
      - Name: FunctionName
        Value:
          Fn::Sub: !If
            - UseSubEnvironment
            - !Sub ${SubEnvironment}-JwksFunction
            - !Sub ${Environment}-JwksFunction

JwksFunctionErrorAnomalyAlarm:
  Type: AWS::CloudWatch::Alarm
  Properties:
    AlarmName:
      Fn::Sub: !If
        - UseSubEnvironment
        - !Sub ${SubEnvironment}-JwksFunction-error-anomaly-alarm
        - !Sub ${Environment}-JwksFunction-error-anomaly-alarm
    AlarmDescription:
      Fn::Sub: "Anomalous Error rate in ${Environment} JwksFunction lambda.ACCOUNT: di-orchestration-${Environment}"
    ActionsEnabled: false
    ComparisonOperator: GreaterThanUpperThreshold
    EvaluationPeriods: 3
    ThresholdMetricId: ad1
    TreatMissingData: notBreaching
    Metrics:
      - Id: ad1
        ReturnData: True
        Expression: ANOMALY_DETECTION_BAND(m1, 2)
      - Id: m1
        ReturnData: True
        MetricStat:
          Metric:
            Namespace: AWS/Lambda
            MetricName: Errors
            Dimensions:
              - Name: FunctionName
                Value:
                  Fn::Sub: !If
                    - UseSubEnvironment
                    - !Sub ${SubEnvironment}-JwksFunction
                    - !Sub ${Environment}-JwksFunction
          Period: 60
          Stat: Average

#endregion

#region Authorisation Function Anomaly Alarms
AuthorisationFunctionErrorAnomalyDetector:
  Type: AWS::CloudWatch::AnomalyDetector
  Properties:
    MetricName: Errors
    Namespace: AWS/Lambda
    Stat: Average
    Dimensions:
      - Name: FunctionName
        Value:
          Fn::Sub: !If
            - UseSubEnvironment
            - !Sub ${SubEnvironment}-AuthorisationFunction
            - !Sub ${Environment}-AuthorisationFunction

AuthorisationFunctionErrorAnomalyAlarm:
  Type: AWS::CloudWatch::Alarm
  Properties:
    AlarmName:
      Fn::Sub: !If
        - UseSubEnvironment
        - !Sub ${SubEnvironment}-AuthorisationFunction-error-anomaly-alarm
        - !Sub ${Environment}-AuthorisationFunction-error-anomaly-alarm
    AlarmDescription:
      Fn::Sub: "Anomalous Error rate in ${Environment} AuthorisationFunction lambda.ACCOUNT: di-orchestration-${Environment}"
    ActionsEnabled: false
    ComparisonOperator: GreaterThanUpperThreshold
    EvaluationPeriods: 3
    ThresholdMetricId: ad1
    TreatMissingData: notBreaching
    Metrics:
      - Id: ad1
        ReturnData: True
        Expression: ANOMALY_DETECTION_BAND(m1, 2)
      - Id: m1
        ReturnData: True
        MetricStat:
          Metric:
            Namespace: AWS/Lambda
            MetricName: Errors
            Dimensions:
              - Name: FunctionName
                Value:
                  Fn::Sub: !If
                    - UseSubEnvironment
                    - !Sub ${SubEnvironment}-AuthorisationFunction
                    - !Sub ${Environment}-AuthorisationFunction
          Period: 60
          Stat: Average

#endregion

#region UserInfo Function Anomaly Alarms
UserInfoFunctionErrorAnomalyDetector:
  Type: AWS::CloudWatch::AnomalyDetector
  Properties:
    MetricName: Errors
    Namespace: AWS/Lambda
    Stat: Average
    Dimensions:
      - Name: FunctionName
        Value:
          Fn::Sub: !If
            - UseSubEnvironment
            - !Sub ${SubEnvironment}-UserInfoFunction
            - !Sub ${Environment}-UserInfoFunction

UserInfoFunctionErrorAnomalyAlarm:
  Type: AWS::CloudWatch::Alarm
  Properties:
    AlarmName:
      Fn::Sub: !If
        - UseSubEnvironment
        - !Sub ${SubEnvironment}-UserInfoFunction-error-anomaly-alarm
        - !Sub ${Environment}-UserInfoFunction-error-anomaly-alarm
    AlarmDescription:
      Fn::Sub: "Anomalous Error rate in ${Environment} UserInfoFunction lambda.ACCOUNT: di-orchestration-${Environment}"
    ActionsEnabled: false
    ComparisonOperator: GreaterThanUpperThreshold
    EvaluationPeriods: 3
    ThresholdMetricId: ad1
    TreatMissingData: notBreaching
    Metrics:
      - Id: ad1
        ReturnData: True
        Expression: ANOMALY_DETECTION_BAND(m1, 2)
      - Id: m1
        ReturnData: True
        MetricStat:
          Metric:
            Namespace: AWS/Lambda
            MetricName: Errors
            Dimensions:
              - Name: FunctionName
                Value:
                  Fn::Sub: !If
                    - UseSubEnvironment
                    - !Sub ${SubEnvironment}-UserInfoFunction
                    - !Sub ${Environment}-UserInfoFunction
          Period: 60
          Stat: Average

#endregion

#region AuthCode Function Anomaly Alarms
AuthCodeFunctionErrorAnomalyDetector:
  Type: AWS::CloudWatch::AnomalyDetector
  Properties:
    MetricName: Errors
    Namespace: AWS/Lambda
    Stat: Average
    Dimensions:
      - Name: FunctionName
        Value:
          Fn::Sub: !If
            - UseSubEnvironment
            - !Sub ${SubEnvironment}-AuthCodeFunction
            - !Sub ${Environment}-AuthCodeFunction

AuthCodeFunctionErrorAnomalyAlarm:
  Type: AWS::CloudWatch::Alarm
  Properties:
    AlarmName:
      Fn::Sub: !If
        - UseSubEnvironment
        - !Sub ${SubEnvironment}-AuthCodeFunction-error-anomaly-alarm
        - !Sub ${Environment}-AuthCodeFunction-error-anomaly-alarm
    AlarmDescription:
      Fn::Sub: "Anomalous Error rate in ${Environment} AuthCodeFunction lambda.ACCOUNT: di-orchestration-${Environment}"
    ActionsEnabled: false
    ComparisonOperator: GreaterThanUpperThreshold
    EvaluationPeriods: 3
    ThresholdMetricId: ad1
    TreatMissingData: notBreaching
    Metrics:
      - Id: ad1
        ReturnData: True
        Expression: ANOMALY_DETECTION_BAND(m1, 2)
      - Id: m1
        ReturnData: True
        MetricStat:
          Metric:
            Namespace: AWS/Lambda
            MetricName: Errors
            Dimensions:
              - Name: FunctionName
                Value:
                  Fn::Sub: !If
                    - UseSubEnvironment
                    - !Sub ${SubEnvironment}-AuthCodeFunction
                    - !Sub ${Environment}-AuthCodeFunction
          Period: 60
          Stat: Average

#endregion

#region UpdateClientConfig Function Anomaly Alarms
UpdateClientConfigFunctionAnomalyDetector:
  Type: AWS::CloudWatch::AnomalyDetector
  Condition: IsNotProduction
  Properties:
    MetricName: Errors
    Namespace: AWS/Lambda
    Stat: Average
    Dimensions:
      - Name: FunctionName
        Value:
          Fn::Sub: !If
            - UseSubEnvironment
            - !Sub ${SubEnvironment}-UpdateClientConfigFunction
            - !Sub ${Environment}-UpdateClientConfigFunction

UpdateClientConfigFunctionErrorAnomalyAlarm:
  Type: AWS::CloudWatch::Alarm
  Condition: IsNotProduction
  Properties:
    AlarmName:
      Fn::Sub: !If
        - UseSubEnvironment
        - !Sub ${SubEnvironment}-UpdateClientConfigFunction-error-anomaly-alarm
        - !Sub ${Environment}-UpdateClientConfigFunction-error-anomaly-alarm
    AlarmDescription:
      Fn::Sub: "Anomalous Error rate in ${Environment} UpdateClientConfigFunction lambda.ACCOUNT: di-orchestration-${Environment}"
    ActionsEnabled: false
    ComparisonOperator: GreaterThanUpperThreshold
    EvaluationPeriods: 3
    ThresholdMetricId: ad1
    TreatMissingData: notBreaching
    Metrics:
      - Id: ad1
        ReturnData: True
        Expression: ANOMALY_DETECTION_BAND(m1, 2)
      - Id: m1
        ReturnData: True
        MetricStat:
          Metric:
            Namespace: AWS/Lambda
            MetricName: Errors
            Dimensions:
              - Name: FunctionName
                Value:
                  Fn::Sub: !If
                    - UseSubEnvironment
                    - !Sub ${SubEnvironment}-UpdateClientConfigFunction
                    - !Sub ${Environment}-UpdateClientConfigFunction
          Period: 60
          Stat: Average

#endregion

#region ClientRegistration Function Anomaly Alarms
ClientRegistrationFunctionAnomalyDetector:
  Type: AWS::CloudWatch::AnomalyDetector
  Condition: IsNotProduction
  Properties:
    MetricName: Errors
    Namespace: AWS/Lambda
    Stat: Average
    Dimensions:
      - Name: FunctionName
        Value:
          Fn::Sub: !If
            - UseSubEnvironment
            - !Sub ${SubEnvironment}-ClientRegistrationFunction
            - !Sub ${Environment}-ClientRegistrationFunction

ClientRegistrationFunctionErrorAnomalyAlarm:
  Type: AWS::CloudWatch::Alarm
  Condition: IsNotProduction
  Properties:
    AlarmName:
      Fn::Sub: !If
        - UseSubEnvironment
        - !Sub ${SubEnvironment}-ClientRegistrationFunction-error-anomaly-alarm
        - !Sub ${Environment}-ClientRegistrationFunction-error-anomaly-alarm
    AlarmDescription:
      Fn::Sub: "Anomalous Error rate in ${Environment} ClientRegistrationFunction lambda.ACCOUNT: di-orchestration-${Environment}"
    ActionsEnabled: false
    ComparisonOperator: GreaterThanUpperThreshold
    EvaluationPeriods: 3
    ThresholdMetricId: ad1
    TreatMissingData: notBreaching
    Metrics:
      - Id: ad1
        ReturnData: True
        Expression: ANOMALY_DETECTION_BAND(m1, 2)
      - Id: m1
        ReturnData: True
        MetricStat:
          Metric:
            Namespace: AWS/Lambda
            MetricName: Errors
            Dimensions:
              - Name: FunctionName
                Value:
                  Fn::Sub: !If
                    - UseSubEnvironment
                    - !Sub ${SubEnvironment}-ClientRegistrationFunction
                    - !Sub ${Environment}-ClientRegistrationFunction
          Period: 60
          Stat: Average

#endregion

#region IpvCallback Function Anomaly Alarms
IpvCallbackFunctionAnomalyDetector:
  Type: AWS::CloudWatch::AnomalyDetector
  Properties:
    MetricName: Errors
    Namespace: AWS/Lambda
    Stat: Average
    Dimensions:
      - Name: FunctionName
        Value:
          Fn::Sub: !If
            - UseSubEnvironment
            - !Sub ${SubEnvironment}-IpvCallbackFunction
            - !Sub ${Environment}-IpvCallbackFunction

IpvCallbackFunctionErrorAnomalyAlarm:
  Type: AWS::CloudWatch::Alarm
  Properties:
    AlarmName:
      Fn::Sub: !If
        - UseSubEnvironment
        - !Sub ${SubEnvironment}-IpvCallbackFunction-error-anomaly-alarm
        - !Sub ${Environment}-IpvCallbackFunction-error-anomaly-alarm
    AlarmDescription:
      Fn::Sub: "Anomalous Error rate in ${Environment} IpvCallbackFunction lambda.ACCOUNT: di-orchestration-${Environment}"
    ActionsEnabled: false
    ComparisonOperator: GreaterThanUpperThreshold
    EvaluationPeriods: 3
    ThresholdMetricId: ad1
    TreatMissingData: notBreaching
    Metrics:
      - Id: ad1
        ReturnData: True
        Expression: ANOMALY_DETECTION_BAND(m1, 2)
      - Id: m1
        ReturnData: True
        MetricStat:
          Metric:
            Namespace: AWS/Lambda
            MetricName: Errors
            Dimensions:
              - Name: FunctionName
                Value:
                  Fn::Sub: !If
                    - UseSubEnvironment
                    - !Sub ${SubEnvironment}-IpvCallbackFunction
                    - !Sub ${Environment}-IpvCallbackFunction
          Period: 60
          Stat: Average

#endregion

#region SpotResponseFunction Function Anomaly Alarms
SpotResponseFunctionAnomalyDetector:
  Type: AWS::CloudWatch::AnomalyDetector
  Condition: IpvExists
  Properties:
    MetricName: Errors
    Namespace: AWS/Lambda
    Stat: Average
    Dimensions:
      - Name: FunctionName
        Value:
          Fn::Sub: !If
            - UseSubEnvironment
            - !Sub ${SubEnvironment}-SpotResponseFunction
            - !Sub ${Environment}-SpotResponseFunction

SpotResponseFunctionErrorAnomalyAlarm:
  Type: AWS::CloudWatch::Alarm
  Condition: IpvExists
  Properties:
    AlarmName:
      Fn::Sub: !If
        - UseSubEnvironment
        - !Sub ${SubEnvironment}-SpotResponseFunction-error-anomaly-alarm
        - !Sub ${Environment}-SpotResponseFunction-error-anomaly-alarm
    AlarmDescription:
      Fn::Sub: "Anomalous Error rate in ${Environment} SpotResponseFunction lambda.ACCOUNT: di-orchestration-${Environment}"
    ActionsEnabled: false
    ComparisonOperator: GreaterThanUpperThreshold
    EvaluationPeriods: 3
    ThresholdMetricId: ad1
    TreatMissingData: notBreaching
    Metrics:
      - Id: ad1
        ReturnData: True
        Expression: ANOMALY_DETECTION_BAND(m1, 2)
      - Id: m1
        ReturnData: True
        MetricStat:
          Metric:
            Namespace: AWS/Lambda
            MetricName: Errors
            Dimensions:
              - Name: FunctionName
                Value:
                  Fn::Sub: !If
                    - UseSubEnvironment
                    - !Sub ${SubEnvironment}-SpotResponseFunction
                    - !Sub ${Environment}-SpotResponseFunction
          Period: 60
          Stat: Average

#endregion

#region StorageTokenJwk Function Anomaly Alarms
StorageTokenJwkFunctionErrorAnomalyDetector:
  Type: AWS::CloudWatch::AnomalyDetector
  Properties:
    MetricName: Errors
    Namespace: AWS/Lambda
    Stat: Average
    Dimensions:
      - Name: FunctionName
        Value:
          Fn::Sub: !If
            - UseSubEnvironment
            - !Sub ${SubEnvironment}-StorageTokenJwkFunction
            - !Sub ${Environment}-StorageTokenJwkFunction

StorageTokenJwkFunctionErrorAnomalyAlarm:
  Type: AWS::CloudWatch::Alarm
  Properties:
    AlarmName:
      Fn::Sub: !If
        - UseSubEnvironment
        - !Sub ${SubEnvironment}-StorageTokenJwkFunction-error-anomaly-alarm
        - !Sub ${Environment}-StorageTokenJwkFunction-error-anomaly-alarm
    AlarmDescription:
      Fn::Sub: "Anomalous Error rate in ${Environment} StorageTokenJwkFunction lambda.ACCOUNT: di-orchestration-${Environment}"
    ActionsEnabled: false
    ComparisonOperator: GreaterThanUpperThreshold
    EvaluationPeriods: 3
    ThresholdMetricId: ad1
    TreatMissingData: notBreaching
    Metrics:
      - Id: ad1
        ReturnData: True
        Expression: ANOMALY_DETECTION_BAND(m1, 2)
      - Id: m1
        ReturnData: True
        MetricStat:
          Metric:
            Namespace: AWS/Lambda
            MetricName: Errors
            Dimensions:
              - Name: FunctionName
                Value:
                  Fn::Sub: !If
                    - UseSubEnvironment
                    - !Sub ${SubEnvironment}-StorageTokenJwkFunction
                    - !Sub ${Environment}-StorageTokenJwkFunction
          Period: 60
          Stat: Average
#endregion
