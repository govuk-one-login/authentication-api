AWSTemplateFormatVersion: "2010-09-09"
Resources:
  AuthenticateFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - RedisCluster
      - RedisMasterHostParameter
      - RedisPasswordParameter
    Properties:
      FunctionName: !Sub
        - ${Env}-account-management-authenticate-lambda
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      AutoPublishAlias: active
      MemorySize: !FindInMap [LambdaDefaults, Global, memorySize]
      CodeUri: ./account-management-api/build/distributions/account-management-api.zip
      Handler: uk.gov.di.accountmanagement.lambda.AuthenticateHandler::handleRequest
      Environment:
        Variables:
          REDIS_KEY: "account-management"
          ENVIRONMENT: !Sub
            - "${env}"
            - env:
                !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
          DYNAMO_ARN_PREFIX: !Sub
            - "arn:aws:dynamodb:${AWS::Region}:${DataStoreAccountId}:table/"
            - DataStoreAccountId:
                !FindInMap [
                  EnvironmentConfiguration,
                  !Ref Environment,
                  dataStoreAccountId,
                ]
          INTERNAL_SECTOR_URI: !If
            - IsNotProduction
            - !If
              - UseSubEnvironment
              - !Sub "https://identity.${SubEnvironment}.dev.account.gov.uk/"
              - !Sub "https://identity.${Environment}.account.gov.uk/"
            - "https://identity.account.gov.uk"
          TXMA_AUDIT_QUEUE_URL: !GetAtt AuthInternalApiTxMAAuditQueue.QueueUrl
          ACCOUNT_INTERVENTION_SERVICE_URI: !Ref AccountInterventionServiceUri
          ACCOUNT_INTERVENTION_SERVICE_CALL_IN_AUTHENTICATE_ENABLED: !Ref AisCallInAuthenticateEnabled
      LoggingConfig:
        LogGroup: !Ref AuthenticateFunctionLogGroup
      Policies:
        - !Ref LambdaBasicExecutionPolicy
        - !Ref AuditSigningKeyLambdaKmsSigningPolicy
        - !Ref DynamoUserReadAccessPolicy
        - !Ref AuthInternalApiTxMAAuditQueueAccessPolicy
        - !Ref RedisParametersAccessPolicy
        - !Ref ClientRegistryTableKmsPolicy
        - !Ref EmailCheckResultsTableKmsPolicy
        - !Ref UserProfileTableKmsPolicy
      SnapStart:
        ApplyOn: PublishedVersions
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
          - !Ref RedisSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdC

  AuthenticateFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AuthenticateFunction.Arn
      Principal: apigateway.amazonaws.com

  AuthenticateFunctionAliasPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthenticateFunction.Alias
      Principal: apigateway.amazonaws.com

  AuthenticateFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - /aws/lambda/${Env}-authenticate-lambda
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      KmsKeyId: !GetAtt MainKmsKey.Arn
      RetentionInDays:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          cloudwatchLogRetentionInDays,
        ]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-AuthenticateFunctionLogGroup"
        - Key: Environment
          Value: !Ref Environment
        - Key: Source
          Value: govuk-one-login/authentication-api/ci/cloudformation/account-management/function/authenticate.yaml

  AuthenticateFunctionErrorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: !Sub
        - ${Env}-account-management-authenticate-errors
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      FilterPattern: '{($.level = "ERROR")}'
      LogGroupName: !Ref AuthenticateFunctionLogGroup
      MetricTransformations:
        - MetricName: !Sub
            - ${Env}-account-management-authenticate-error-count
            - Env:
                !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
          MetricNamespace: LambdaErrorsNamespace
          MetricValue: 1

  AuthenticateFunctionErrorCloudwatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions: !If
        - UseAlarmActions
        - - !Sub "{{resolve:ssm:/deploy/${Environment}/notification_topic_arn}}"
        - []
      AlarmDescription: !Sub
        - "${AlarmThreshold} or more number of errors have occurred in the ${Env}-account-management-authenticate-lambda function. ${RunbookLink}"
        - AlarmThreshold:
            !FindInMap [
              EnvironmentConfiguration,
              !Ref Environment,
              lambdaLogAlarmThreshold,
              DefaultValue: 5,
            ]
          Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
          RunbookLink:
            !FindInMap [
              LambdaConfiguration,
              "authenticate",
              RunbookLink,
              DefaultValue: "",
            ]
      AlarmName: !Sub
        - ${Env}-account-management-authenticate-alarm
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: !Sub
        - ${Env}-account-management-authenticate-error-count
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      Namespace: LambdaErrorsNamespace
      Period: 3600
      Statistic: Sum
      Threshold:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          lambdaLogAlarmThreshold,
          DefaultValue: 5,
        ]

  AuthenticateFunctionErrorRateCloudwatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions: !If
        - UseAlarmActions
        - - !Sub "{{resolve:ssm:/deploy/${Environment}/notification_topic_arn}}"
        - []
      AlarmDescription: !Sub
        - "Lambda error rate of ${ErrorRateThreshold}% has been reached in the ${Env}-account-management-authenticate-lambda. ${RunbookLink}"
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
          ErrorRateThreshold:
            !FindInMap [
              EnvironmentConfiguration,
              !Ref Environment,
              lambdaLogAlarmErrorRateThreshold,
              DefaultValue: 10,
            ]
          RunbookLink:
            !FindInMap [
              LambdaConfiguration,
              "authenticate",
              RunbookLink,
              DefaultValue: "",
            ]
      AlarmName: !Sub
        - ${Env}-account-management-authenticate-error-rate-alarm
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      Metrics:
        - Id: e1
          Label: "Error Rate"
          ReturnData: true
          Expression: (m2/m1)*100
        - Id: m1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Sub
                    - ${Env}-account-management-authenticate-lambda
                    - Env:
                        !If [
                          UseSubEnvironment,
                          !Ref SubEnvironment,
                          !Ref Environment,
                        ]
            Period: 60
            Stat: Sum
            Unit: Count
        - Id: m2
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Errors
              Dimensions:
                - Name: FunctionName
                  Value: !Sub
                    - ${Env}-account-management-authenticate-lambda
                    - Env:
                        !If [
                          UseSubEnvironment,
                          !Ref SubEnvironment,
                          !Ref Environment,
                        ]
            Period: 60
            Stat: Sum
            Unit: Count
      Threshold:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          lambdaLogAlarmErrorRateThreshold,
          DefaultValue: 10,
        ]

  AuthenticateFunctionSubscriptionFilter:
    Condition: IsSplunkEnabled
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Ref LoggingSubscriptionEndpointArn
      FilterPattern: ""
      LogGroupName: !Ref AuthenticateFunctionLogGroup
