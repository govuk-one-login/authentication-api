AWSTemplateFormatVersion: "2010-09-09"
Resources:
  AccountManagementMethodManagementApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub
        - ${Env}-di-account-management-api-method-management
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      EndpointConfiguration:
        Types:
          - PRIVATE
        VpcEndpointIds:
          - Fn::ImportValue: !Sub "${VpcStackName}-ExecuteApiGatewayEndpointId"
      Policy:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowAll"
            Effect: Allow
            Action: "execute-api:Invoke"
            Principal: "*"
            Resource: "execute-api:/*"
          - Sid: "EnforceVpcEndpointAccess"
            Effect: Deny
            Action: "execute-api:Invoke"
            Principal: "*"
            Resource: "execute-api:/*"
            Condition:
              StringNotEquals:
                aws:SourceVpce:
                  - Fn::ImportValue: !Sub "${VpcStackName}-ExecuteApiGatewayEndpointId"
      Body:
        openapi: "3.0.1"
        info:
          title: "auth-account-management-method-management-api"
          version: 1.0.2
          description: Auth Account Management API
        servers:
          - url: "https://localhost:8080/"
        paths:
          /authenticate:
            post:
              security:
                - authorise-access-token: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthenticateFunction.Arn}:active/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
          /update-password:
            post:
              security:
                - authorise-access-token: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdatePasswordFunction.Arn}:active/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
          /update-email:
            post:
              security:
                - authorise-access-token: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateEmailFunction.Arn}:active/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
          /update-phone-number:
            post:
              security:
                - authorise-access-token: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdatePhoneNumberFunction.Arn}:active/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
          /delete-account:
            post:
              security:
                - authorise-access-token: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteAccountFunction.Arn}:active/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
          /send-otp-notification:
            post:
              security:
                - authorise-access-token: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendOtpNotificationFunction.Arn}:active/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
          /mfa-methods:
            post:
              security:
                - authorise-access-token: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MfaMethodCreateFunction.Arn}:active/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
          /v1/{publicSubjectId}:
            get:
              security:
                - authorise-access-token: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MfaMethodRetrieveFunction.Arn}:active/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
          /mfa-methods/{mfaIdentifier}:
            put:
              security:
                - authorise-access-token: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MfaMethodUpdateFunction.Arn}:active/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
            delete:
              security:
                - authorise-access-token: []
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MfaMethodDeleteFunction.Arn}:active/invocations"
                passthroughBehavior: "when_no_match"
                timeoutInMillis: 29000
        components:
          securitySchemes:
            authorise-access-token:
              type: apiKey
              name: Authorization
              in: header

  AccountManagementMethodManagementApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref AccountManagementMethodManagementApi
      Description: "Account Management API Deployment"

  AccountManagementMethodManagementApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref AccountManagementMethodManagementApiDeployment
      RestApiId: !Ref AccountManagementMethodManagementApi
      StageName: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]

Outputs:
  AccountManagementMethodManagementApiId:
    Value: !Ref AccountManagementMethodManagementApi
    Export:
      Name: !Sub "${AWS::StackName}-AccountManagementMethodManagementApiId"

  AccountManagementMethodManagementApiRootResourceId:
    Value: !GetAtt AccountManagementMethodManagementApi.RootResourceId
    Export:
      Name: !Sub "${AWS::StackName}-AccountManagementMethodManagementApiRootResourceId"
