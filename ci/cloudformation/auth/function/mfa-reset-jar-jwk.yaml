AWSTemplateFormatVersion: "2010-09-09"
Resources:
  MfaResetJarJwkFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub
        - ${Env}-mfa-reset-jar-jwk-lambda
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      AutoPublishAlias: active
      CodeUri: ./frontend-api/build/distributions/frontend-api.zip
      Handler: uk.gov.di.authentication.frontendapi.lambda.MfaResetJarJwkHandler::handleRequest
      Environment:
        Variables:
          IPV_REVERIFICATION_REQUESTS_SIGNING_KEY_ALIAS: !Sub
            - arn:aws:kms:${AWS::Region}:${DataStoreAccountId}:alias/${env}-ipv_reverification_request_signing_key
            - DataStoreAccountId:
                !FindInMap [
                  EnvironmentConfiguration,
                  !Ref Environment,
                  dataStoreAccountId,
                ]
              env:
                !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      LoggingConfig:
        LogGroup: !Ref MfaResetJarJwkFunctionLogGroup
      Policies:
        - !Ref LambdaBasicExecutionPolicy
        - !Ref IPVReverificationRequestSigningKeyPolicy
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdC

  MfaResetJarJwkFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MfaResetJarJwkFunction.Arn
      Principal: apigateway.amazonaws.com

  MfaResetJarJwkFunctionAliasPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MfaResetJarJwkFunction.Alias
      Principal: apigateway.amazonaws.com

  MfaResetJarJwkFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - /aws/lambda/${Env}-mfa-reset-jar-jwk-lambda
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      KmsKeyId: !GetAtt MainKmsKey.Arn
      RetentionInDays:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          cloudwatchLogRetentionInDays,
        ]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-MfaResetJarJwkFunctionLogGroup"
        - Key: Environment
          Value: !Ref Environment
        - Key: Source
          Value: govuk-one-login/authentication-api/ci/cloudformation/auth/function/mfa-reset-jar-jwk.yaml

  MfaResetJarJwkFunctionErrorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: !Sub
        - ${Env}-mfa-reset-jar-jwk-errors
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      FilterPattern: '{($.level = "ERROR")}'
      LogGroupName: !Ref MfaResetJarJwkFunctionLogGroup
      MetricTransformations:
        - MetricName: !Sub
            - ${Env}-mfa-reset-jar-jwk-error-count
            - Env:
                !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
          MetricNamespace: LambdaErrorsNamespace
          MetricValue: 1

  MfaResetJarJwkFunctionErrorCloudwatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions: !If
        - UseAlarmActions
        - - !Sub "{{resolve:ssm:/deploy/${Environment}/notification_topic_arn}}"
        - []
      AlarmDescription: !Sub
        - "${AlarmThreshold} or more number of errors have occurred in the ${Env}-mfa-reset-jar-jwk-lambda function. ${RunbookLink}"
        - AlarmThreshold:
            !FindInMap [
              EnvironmentConfiguration,
              !Ref Environment,
              lambdaLogAlarmThreshold,
              DefaultValue: 5,
            ]
          Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
          RunbookLink:
            !FindInMap [
              LambdaConfiguration,
              "mfa-reset-jar-jwk",
              RunbookLink,
              DefaultValue: "",
            ]
      AlarmName: !Sub
        - ${Env}-mfa-reset-jar-jwk-alarm
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: !Sub
        - ${Env}-mfa-reset-jar-jwk-error-count
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      Namespace: LambdaErrorsNamespace
      Period: 3600
      Statistic: Sum
      Threshold:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          lambdaLogAlarmThreshold,
          DefaultValue: 5,
        ]

  MfaResetJarJwkFunctionErrorRateCloudwatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions: !If
        - UseAlarmActions
        - - !Sub "{{resolve:ssm:/deploy/${Environment}/notification_topic_arn}}"
        - []
      AlarmDescription: !Sub
        - "Lambda error rate of ${ErrorRateThreshold}% has been reached in the ${Env}-mfa-reset-jar-jwk-lambda. ${RunbookLink}"
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
          ErrorRateThreshold:
            !FindInMap [
              EnvironmentConfiguration,
              !Ref Environment,
              lambdaLogAlarmErrorRateThreshold,
              DefaultValue: 10,
            ]
          RunbookLink:
            !FindInMap [
              LambdaConfiguration,
              "mfa-reset-jar-jwk",
              RunbookLink,
              DefaultValue: "",
            ]
      AlarmName: !Sub
        - ${Env}-mfa-reset-jar-jwk-error-rate-alarm
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      Metrics:
        - Id: e1
          Label: "Error Rate"
          ReturnData: true
          Expression: (m2/m1)*100
        - Id: m1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Sub
                    - ${Env}-mfa-reset-jar-jwk-lambda
                    - Env:
                        !If [
                          UseSubEnvironment,
                          !Ref SubEnvironment,
                          !Ref Environment,
                        ]
            Period: 60
            Stat: Sum
            Unit: Count
        - Id: m2
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Errors
              Dimensions:
                - Name: FunctionName
                  Value: !Sub
                    - ${Env}-mfa-reset-jar-jwk-lambda
                    - Env:
                        !If [
                          UseSubEnvironment,
                          !Ref SubEnvironment,
                          !Ref Environment,
                        ]
            Period: 60
            Stat: Sum
            Unit: Count
      Threshold:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          lambdaLogAlarmErrorRateThreshold,
          DefaultValue: 10,
        ]

  MfaResetJarJwkFunctionSubscriptionFilter:
    Condition: IsSplunkEnabled
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Ref LoggingSubscriptionEndpointArn
      FilterPattern: ""
      LogGroupName: !Ref MfaResetJarJwkFunctionLogGroup

  MfaResetJarJwkFunctionScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: NotSubEnvironment
    # Need to depend on the auto deployed version alias: "<function_logical_id> + Alias + <the_alias_name>"
    DependsOn: MfaResetJarJwkFunctionAliasactive
    Properties:
      MinCapacity:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          lambdaMinConcurrency,
          DefaultValue: 0,
        ]
      MaxCapacity:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          lambdaMaxConcurrency,
          DefaultValue: 5,
        ]
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency"
      ResourceId: !Join
        - ":"
        - - "function"
          - !Select [6, !Split [":", !GetAtt MfaResetJarJwkFunction.Arn]]
          - "active"
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda

  MfaResetJarJwkFunctionAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: NotSubEnvironment
    DependsOn: MfaResetJarJwkFunctionScalableTarget
    Properties:
      PolicyName: !Sub
        - "LambdaProvisionedConcurrency:${Env}-mfa-reset-jar-jwk-lambda"
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      PolicyType: TargetTrackingScaling
      ResourceId: !Join
        - ":"
        - - "function"
          - !Select [6, !Split [":", !GetAtt MfaResetJarJwkFunction.Arn]]
          - "active"
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization
        TargetValue:
          !FindInMap [
            EnvironmentConfiguration,
            !Ref Environment,
            lambdaAutoscalingTargetValue,
            DefaultValue: "0.6",
          ]
