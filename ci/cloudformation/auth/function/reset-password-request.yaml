AWSTemplateFormatVersion: "2010-09-09"
Resources:
  ResetPasswordRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub
        - ${Env}-reset-password-request-lambda
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      AutoPublishAlias: active
      CodeUri: ./frontend-api/build/distributions/frontend-api.zip
      Handler: uk.gov.di.authentication.frontendapi.lambda.ResetPasswordRequestHandler::handleRequest
      Environment:
        Variables:
          DEFAULT_OTP_CODE_EXPIRY: !If
            - UseSubEnvironment
            - !FindInMap [
                EnvironmentConfiguration,
                !Ref SubEnvironment,
                otpCodeTtlDuration,
              ]
            - !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                otpCodeTtlDuration,
              ]
          DYNAMO_ARN_PREFIX: !Sub
            - "arn:aws:dynamodb:${AWS::Region}:${DataStoreAccountId}:table/"
            - DataStoreAccountId:
                !FindInMap [
                  EnvironmentConfiguration,
                  !Ref Environment,
                  dataStoreAccountId,
                ]
          EMAIL_QUEUE_URL: !GetAtt EmailNotificationQueue.QueueUrl
          FRONTEND_BASE_URL: !Sub
            - "${BaseUrl}/"
            - BaseUrl:
                !FindInMap [
                  EnvironmentConfiguration,
                  !If [
                    UseSubEnvironment,
                    !Ref SubEnvironment,
                    !Ref Environment,
                  ],
                  frontendBaseUrl,
                ]
          INTERNAl_SECTOR_URI: !If
            - IsNotProduction
            - !If
              - UseSubEnvironment
              - !Sub "https://identity.${SubEnvironment}.${Environment}.account.gov.uk"
              - !Sub "https://identity.${Environment}.account.gov.uk"
            - "https://identity.account.gov.uk"
          LOCKOUT_DURATION: !If
            - UseSubEnvironment
            - !FindInMap [
                EnvironmentConfiguration,
                !Ref SubEnvironment,
                lockoutDuration,
              ]
            - !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                lockoutDuration,
              ]
          LOCKOUT_COUNT_TTL: !If
            - UseSubEnvironment
            - !FindInMap [
                EnvironmentConfiguration,
                !Ref SubEnvironment,
                lockoutCountTtl,
              ]
            - !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                lockoutCountTtl,
              ]
          REDIS_KEY: "session"
          RESET_PASSWORD_ROUTE: "reset-password?code="
          TXMA_AUDIT_QUEUE_URL: !GetAtt AuthInternalApiTxMAAuditQueue.QueueUrl
          USE_STRONGLY_CONSISTENT_READS: !If
            - UseSubEnvironment
            - !FindInMap [
                EnvironmentConfiguration,
                !Ref SubEnvironment,
                useStronglyConsistentReads,
              ]
            - !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                useStronglyConsistentReads,
              ]
      LoggingConfig:
        LogGroup: !Ref ResetPasswordRequestFunctionLogGroup
      Policies:
        - !Ref LambdaBasicExecutionPolicy
        - !Ref AuditEventsSnsPolicy
        - !Ref AuditSigningKeyLambdaKmsSigningPolicy
        - !Ref AuthInternalApiTxMAAuditQueueAccessPolicy
        - !Ref DynamoAuthSessionStoreReadWriteAccessPolicy
        - !Ref DynamoClientRegistryReadAccessPolicy
        - !Ref DynamoUserReadWriteAccessPolicy
        - !Ref RedisParametersAccessPolicy
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdC

  ResetPasswordRequestFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ResetPasswordRequestFunction.Arn
      Principal: apigateway.amazonaws.com

  ResetPasswordRequestFunctionAliasPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ResetPasswordRequestFunction.Alias
      Principal: apigateway.amazonaws.com

  ResetPasswordRequestFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - /aws/lambda/${Env}-reset-password-request-lambda
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      KmsKeyId: !GetAtt MainKmsKey.Arn
      RetentionInDays:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          cloudwatchLogRetentionInDays,
        ]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ResetPasswordRequestFunctionLogGroup"
        - Key: Environment
          Value: !Ref Environment
        - Key: Source
          Value: govuk-one-login/authentication-api/ci/cloudformation/auth/function/reset-password-request.yaml

  ResetPasswordRequestFunctionErrorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: !Sub
        - ${Env}-reset-password-request-errors
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      FilterPattern: '{($.level = "ERROR")}'
      LogGroupName: !Ref ResetPasswordRequestFunctionLogGroup
      MetricTransformations:
        - MetricName: !Sub
            - ${Env}-reset-password-request-error-count
            - Env:
                !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
          MetricNamespace: LambdaErrorsNamespace
          MetricValue: 1

  ResetPasswordRequestFunctionErrorCloudwatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions: !If
        - UseAlarmActions
        - - !Sub "{{resolve:ssm:/deploy/${Environment}/notification_topic_arn}}"
        - []
      AlarmDescription: !Sub
        - "${AlarmThreshold} or more number of errors have occurred in the ${Env}-reset-password-request-lambda function. ${RunbookLink}"
        - AlarmThreshold:
            !FindInMap [
              EnvironmentConfiguration,
              !Ref Environment,
              lambdaLogAlarmThreshold,
              DefaultValue: 5,
            ]
          Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
          RunbookLink:
            !FindInMap [
              LambdaConfiguration,
              "reset-password-request",
              RunbookLink,
              DefaultValue: "",
            ]
      AlarmName: !Sub
        - ${Env}-reset-password-request-alarm
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: !Sub
        - ${Env}-reset-password-request-error-count
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      Namespace: LambdaErrorsNamespace
      Period: 3600
      Statistic: Sum
      Threshold:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          lambdaLogAlarmThreshold,
          DefaultValue: 5,
        ]

  ResetPasswordRequestFunctionErrorRateCloudwatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions: !If
        - UseAlarmActions
        - - !Sub "{{resolve:ssm:/deploy/${Environment}/notification_topic_arn}}"
        - []
      AlarmDescription: !Sub
        - "Lambda error rate of ${ErrorRateThreshold}% has been reached in the ${Env}-reset-password-request-lambda. ${RunbookLink}"
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
          ErrorRateThreshold:
            !FindInMap [
              EnvironmentConfiguration,
              !Ref Environment,
              lambdaLogAlarmErrorRateThreshold,
              DefaultValue: 10,
            ]
          RunbookLink:
            !FindInMap [
              LambdaConfiguration,
              "reset-password-request",
              RunbookLink,
              DefaultValue: "",
            ]
      AlarmName: !Sub
        - ${Env}-reset-password-request-error-rate-alarm
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      Metrics:
        - Id: e1
          Label: "Error Rate"
          ReturnData: true
          Expression: (m2/m1)*100
        - Id: m1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Invocations
              Dimensions:
                - Name: FunctionName
                  Value: !Sub
                    - ${Env}-reset-password-request-lambda
                    - Env:
                        !If [
                          UseSubEnvironment,
                          !Ref SubEnvironment,
                          !Ref Environment,
                        ]
            Period: 60
            Stat: Sum
            Unit: Count
        - Id: m2
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Lambda
              MetricName: Errors
              Dimensions:
                - Name: FunctionName
                  Value: !Sub
                    - ${Env}-reset-password-request-lambda
                    - Env:
                        !If [
                          UseSubEnvironment,
                          !Ref SubEnvironment,
                          !Ref Environment,
                        ]
            Period: 60
            Stat: Sum
            Unit: Count
      Threshold:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          lambdaLogAlarmErrorRateThreshold,
          DefaultValue: 10,
        ]

  ResetPasswordRequestFunctionSubscriptionFilter:
    Condition: IsSplunkEnabled
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Ref LoggingSubscriptionEndpointArn
      FilterPattern: ""
      LogGroupName: !Ref ResetPasswordRequestFunctionLogGroup

  ResetPasswordRequestFunctionScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: NotSubEnvironment
    # Need to depend on the auto deployed version alias: "<function_logical_id> + Alias + <the_alias_name>"
    DependsOn: ResetPasswordRequestFunctionAliasactive
    Properties:
      MinCapacity:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          lambdaMinConcurrency,
          DefaultValue: 0,
        ]
      MaxCapacity:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          lambdaMaxConcurrency,
          DefaultValue: 5,
        ]
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency"
      ResourceId: !Join
        - ":"
        - - "function"
          - !Select [6, !Split [":", !GetAtt ResetPasswordRequestFunction.Arn]]
          - "active"
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda

  ResetPasswordRequestFunctionAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: NotSubEnvironment
    DependsOn: ResetPasswordRequestFunctionScalableTarget
    Properties:
      PolicyName: !Sub
        - "LambdaProvisionedConcurrency:${Env}-reset-password-request-lambda"
        - Env: !If [UseSubEnvironment, !Ref SubEnvironment, !Ref Environment]
      PolicyType: TargetTrackingScaling
      ResourceId: !Join
        - ":"
        - - "function"
          - !Select [6, !Split [":", !GetAtt ResetPasswordRequestFunction.Arn]]
          - "active"
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization
        TargetValue:
          !FindInMap [
            EnvironmentConfiguration,
            !Ref Environment,
            lambdaAutoscalingTargetValue,
            DefaultValue: "0.6",
          ]
