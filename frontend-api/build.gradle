plugins {
    id "java"
    id "jacoco"
    alias libs.plugins.pact
}

group = "uk.gov.di.authentication.frontendapi"
version = "unspecified"

File terraformDir = new File(project.rootDir, "ci/terraform/oidc")

dependencies {

    implementation project(path: ':shared')
    implementation project(':user-permissions')
    implementation project(':audit-events')

    compileOnly libs.bundles.awsLambda,
            libs.awsSqs,
            libs.awsSsm,
            libs.awsSns,
            libs.awsS3,
            libs.bundles.awsDynamoDb,
            libs.awsKms

    implementation libs.govUkNotify,
            libs.bundles.apache,
            libs.gson,
            libs.bundles.nimbus,
            libs.awsCloudwatchEmf,
            libs.bouncyCastle,
            libs.awsKms,
            libs.jetbrainsAnnotations

    runtimeOnly libs.bundles.loggingRuntime,
            platform(libs.openTelemetryBom),
            libs.openTelemetryAwsSdk

    testImplementation libs.bundles.test,
            libs.awsLambdaTests,
            project(":shared-test"),
            libs.bundles.awsLambda,
            libs.awsSqs,
            libs.awsS3,
            libs.awsKms,
            libs.bundles.awsDynamoDb,
            libs.pactConsumer,
            libs.wiremock

    testRuntimeOnly libs.bundles.testRuntime
}

test {
    useJUnitPlatform()
    environment "TRACING_ENABLED", "false"
    exclude 'uk/gov/di/authentication/frontendapi/contract/**'
}

var pactDir = "$rootDir/frontend-api/src/test/pact"

task pactConsumerTests (type: Test, group: "verification") {
    useJUnitPlatform()
    include 'uk/gov/di/authentication/frontendapi/contract/**'
    systemProperties['pact.rootDir'] = pactDir
}

pact {
    publish {
        pactDirectory = pactDir
        pactBrokerUrl = "$System.env.PACT_URL".toString() + "?testSource=" + "$System.env.PACT_BROKER_SOURCE_HEADER".toString()
        pactBrokerUsername = "$System.env.PACT_USER".toString()
        pactBrokerPassword = "$System.env.PACT_PASSWORD".toString()
        consumerVersion = "$System.env.CONSUMER_APP_VERSION".toString()
        consumerBranch = "${System.env.GIT_BRANCH}".toString()
        tags = [
            "${System.env.GIT_BRANCH}".toString()
        ]
    }
}

task buildZip(type: Zip) {
    if (isDevDeployBuild) {
        destinationDirectory = new File(terraformDir, "artifacts")
    }
    from compileJava
    from processResources
    into("lib") {
        from configurations.runtimeClasspath
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jacocoTestReport {
    reports {
        xml.required = true
    }
    dependsOn "test"
}
