plugins {
    id "java"
    id "jacoco"
    id "au.com.dius.pact" version "4.6.11"
}

group "uk.gov.di.authentication.oidc"
version "unspecified"

dependencies {
    compileOnly configurations.kms,
            configurations.lambda,
            configurations.sqs,
            configurations.sns,
            configurations.dynamodb

    implementation configurations.govuk_notify,
            configurations.gson,
            configurations.nimbus,
            configurations.bouncycastle,
            configurations.cloudwatch,
            configurations.apache,
            configurations.jetbrains_annotations,
            project(":orchestration-shared"),
            project(":client-registry-api"),
            project(":doc-checking-app-api")

    implementation project(path: ':ipv-api')

    testImplementation configurations.tests,
            configurations.lambda_tests,
            project(path: ':ipv-api'),
            project(":orchestration-shared-test"),
            configurations.lambda,
            configurations.sqs,
            configurations.kms,
            configurations.dynamodb,
            configurations.pact_consumer

    testRuntimeOnly configurations.test_runtime
}

test {
    useJUnitPlatform()
    environment "TRACING_ENABLED", "false"
    exclude 'uk/gov/di/authentication/oidc/contract/**'
}

var pactDir = "$rootDir/oidc-api/src/test/pact"

task pactConsumerTests (type: Test, group: "verification") {
    useJUnitPlatform()
    include '/uk/gov/di/authentication/oidc/contract/**'
    systemProperties['pact.rootDir'] = pactDir
}

pact {
    publish {
        pactDirectory = pactDir
        pactBrokerUrl = "$System.env.PACT_URL".toString() + "?testSource=" + "$System.env.PACT_BROKER_SOURCE_HEADER".toString()
        pactBrokerUsername = "$System.env.PACT_USER".toString()
        pactBrokerPassword = "$System.env.PACT_PASSWORD".toString()
        consumerVersion = "$System.env.CONSUMER_APP_VERSION".toString()
        consumerBranch = "${System.env.GIT_BRANCH}".toString()
        tags = [
            "${System.env.GIT_BRANCH}".toString()
        ]
    }
}

task buildZip(type: Zip) {
    from compileJava
    from processResources
    into("lib") {
        from configurations.runtimeClasspath
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
    dependsOn "test"
}
